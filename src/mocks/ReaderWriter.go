// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	context "context"

	metadata "github.com/shivaji17/notionbackup/src/metadata"
	mock "github.com/stretchr/testify/mock"

	notionapi "github.com/jomei/notionapi"

	rw "github.com/shivaji17/notionbackup/src/rw"
)

// ReaderWriter is an autogenerated mock type for the ReaderWriter type
type ReaderWriter struct {
	mock.Mock
}

// CleanUp provides a mock function with given fields: _a0
func (_m *ReaderWriter) CleanUp(_a0 context.Context) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetStorageConfig provides a mock function with given fields: _a0
func (_m *ReaderWriter) GetStorageConfig(_a0 context.Context) (*metadata.StorageConfig, error) {
	ret := _m.Called(_a0)

	var r0 *metadata.StorageConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*metadata.StorageConfig, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *metadata.StorageConfig); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metadata.StorageConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadBlock provides a mock function with given fields: _a0, _a1
func (_m *ReaderWriter) ReadBlock(_a0 context.Context, _a1 rw.DataIdentifier) (notionapi.Block, error) {
	ret := _m.Called(_a0, _a1)

	var r0 notionapi.Block
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, rw.DataIdentifier) (notionapi.Block, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, rw.DataIdentifier) notionapi.Block); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(notionapi.Block)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, rw.DataIdentifier) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadDatabase provides a mock function with given fields: _a0, _a1
func (_m *ReaderWriter) ReadDatabase(_a0 context.Context, _a1 rw.DataIdentifier) (*notionapi.Database, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *notionapi.Database
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, rw.DataIdentifier) (*notionapi.Database, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, rw.DataIdentifier) *notionapi.Database); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*notionapi.Database)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, rw.DataIdentifier) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadPage provides a mock function with given fields: _a0, _a1
func (_m *ReaderWriter) ReadPage(_a0 context.Context, _a1 rw.DataIdentifier) (*notionapi.Page, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *notionapi.Page
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, rw.DataIdentifier) (*notionapi.Page, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, rw.DataIdentifier) *notionapi.Page); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*notionapi.Page)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, rw.DataIdentifier) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WriteBlock provides a mock function with given fields: _a0, _a1
func (_m *ReaderWriter) WriteBlock(_a0 context.Context, _a1 notionapi.Block) (rw.DataIdentifier, error) {
	ret := _m.Called(_a0, _a1)

	var r0 rw.DataIdentifier
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, notionapi.Block) (rw.DataIdentifier, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, notionapi.Block) rw.DataIdentifier); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(rw.DataIdentifier)
	}

	if rf, ok := ret.Get(1).(func(context.Context, notionapi.Block) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WriteDatabase provides a mock function with given fields: _a0, _a1
func (_m *ReaderWriter) WriteDatabase(_a0 context.Context, _a1 *notionapi.Database) (rw.DataIdentifier, error) {
	ret := _m.Called(_a0, _a1)

	var r0 rw.DataIdentifier
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *notionapi.Database) (rw.DataIdentifier, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *notionapi.Database) rw.DataIdentifier); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(rw.DataIdentifier)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *notionapi.Database) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WriteMetaData provides a mock function with given fields: _a0, _a1
func (_m *ReaderWriter) WriteMetaData(_a0 context.Context, _a1 *metadata.MetaData) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *metadata.MetaData) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WritePage provides a mock function with given fields: _a0, _a1
func (_m *ReaderWriter) WritePage(_a0 context.Context, _a1 *notionapi.Page) (rw.DataIdentifier, error) {
	ret := _m.Called(_a0, _a1)

	var r0 rw.DataIdentifier
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *notionapi.Page) (rw.DataIdentifier, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *notionapi.Page) rw.DataIdentifier); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(rw.DataIdentifier)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *notionapi.Page) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewReaderWriter interface {
	mock.TestingT
	Cleanup(func())
}

// NewReaderWriter creates a new instance of ReaderWriter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewReaderWriter(t mockConstructorTestingTNewReaderWriter) *ReaderWriter {
	mock := &ReaderWriter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
